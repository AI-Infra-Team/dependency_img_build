{
	"nodes":[
		{"id":"c46323a0ab440a83","type":"group","x":1500,"y":-620,"width":1260,"height":1110,"label":"关键设计细节"},
		{"id":"5b76f639ae73e836","type":"group","x":-300,"y":-1080,"width":670,"height":1279,"label":"依赖配置结构设计"},
		{"id":"cli-interface","type":"text","text":"# 🖥️ CLI 接口\n\n**cli.py**\n```bash\nbuild -c config.yaml\nstatus [-c config]\nclean [--max-age]\ninit [-o output]\n```\n\n**特性**\n- 无 -t 参数设计\n- 实时进度显示\n- 缓存统计报告","x":590,"y":-740,"width":300,"height":430,"color":"5"},
		{"id":"future-features","type":"text","text":"# 🚀 未来规划\n\n**远程缓存系统**\n- MinIO 集成\n- GHCR 支持\n- 缓存自动提升\n\n**智能优化**\n- ML 预测重建\n- 自动阶段重排\n- 缓存预热机制","x":1145,"y":200,"width":280,"height":580,"color":"5"},
		{"id":"core-concept","type":"text","text":"# 🎯 核心理念\n\n## Dynamic Docker Build System\n\n**接管 Docker 构建过程**\n- 动态 Dockerfile 生成\n- 多级缓存系统\n- 智能重建策略","x":-820,"y":-1005,"width":410,"height":300,"color":"1"},
		{"id":"env-injection","type":"text","text":"# 🔐 环境变量注入\n\n**动态注入策略**\n- 只在重建点前插入\n- 保持前面步骤缓存\n\n**继承配置**\n- inherit_proxy: 代理变量\n- inherit_locale: 语言设置\n- inherit_timezone: 时区\n- inherit_custom_env: 自定义","x":1525,"y":-589,"width":398,"height":432,"color":"2"},
		{"id":"implementation-gaps","type":"text","text":"# ⚠️ 实现细节补充\n\n**1. sudo 权限处理**\n- sudo_prefix() 函数\n- 非 root 用户自动提权\n\n**2. 阶段优化算法**\n- get_optimized_stage_order()\n- 基于变更频率重排\n\n**3. 调试输出机制**\n- 每个 RUN 前缀 DEBUG\n- 环境变量状态跟踪\n\n**4. 向后兼容层**\n- 同时支持新旧格式\n- 自动格式检测转换","x":1525,"y":-96,"width":398,"height":555,"color":"red"},
        {"id":"config-format","type":"text","text":"# 📄 配置格式\n\n```yaml\n# 新格式\nlight_setup:\n  config_files: [...]\nheavy_setup:\n  apt_packages: [...]\n  yum_packages: [...]\n  pip_packages: [...]  # 仅支持此处配置 pip\n  script_installs: [...]\n  \n# 环境继承\ninherit_env: true\ninherit_proxy: true\ninherit_custom_env: [...]\n```","x":653,"y":15,"width":400,"height":410,"color":"3"},
		{"id":"rebuild-algorithm","type":"text","text":"# 🔄 智能重建算法\n\n**核心逻辑**\n```python\n# 找到第一个变更点\nfor i, step in enumerate(steps):\n    if step.hash != cached.hash:\n        rebuild_from = i\n        break\n        \n# 从变更点开始全部重建\n[keep, keep, rebuild, rebuild...]\n```\n\n**环境变量注入点**\n- 在 rebuild_from 前插入","x":1948,"y":-589,"width":398,"height":432,"color":"4"},
		{"id":"cache-system","type":"text","text":"# 💾 多级缓存架构\n\n## 本地缓存\n- Docker 镜像层\n- .build_cache.json\n- 阶段变更统计\n\n## 远程缓存 (规划)\n- MinIO 对象存储\n- GHCR 公共缓存\n- 团队缓存共享","x":1948,"y":-96,"width":373,"height":555,"color":"1"},
		{"id":"apt-optimization","type":"text","text":"# 🔧 APT 包安装优化\n\n**每个包独立步骤**\n```dockerfile\nRUN apt-get update && \\\n    apt-get install -y pkg1\nRUN apt-get install -y pkg2\nRUN apt-get install -y pkg3\nRUN rm -rf /var/lib/apt/lists/*\n```\n\n**优势**\n- 包级别缓存\n- 增量安装/删除\n- 避免重复 update","x":2347,"y":-96,"width":373,"height":555,"color":"4"},
        {"id":"pm-abstraction","type":"text","text":"# 📦 包管理抽象\n\n**接口**\n- PackageManager(name, needs_refresh, refresh_cmd, install_cmd, remove_cmd)\n\n**实现**\n- AptManager / YumManager / PipManager\n\n**约定**\n- pip 仅支持 heavy_setup.pip_packages\n- 不支持 layers.pip\n\n**Refresh**\n- apt: apt-get update\n- yum: yum makecache\n- pip: 无需\n\n**Cleanup**\n- apt: purge + autoremove\n- yum: remove\n- pip: uninstall","x":2347,"y":480,"width":380,"height":520,"color":"6"},
		{"id":"cache-manager","type":"text","text":"# 🗄️ 缓存管理器\n\n**cache_manager.py**\n- CacheManager\n- 多级缓存协调\n- 远程缓存接口\n- 缓存提升机制\n- 清理策略","x":778,"y":790,"width":250,"height":380,"color":"6"},
		{"id":"stage-dependency","type":"text","text":"# 🔗 依赖管理\n\n**拓扑排序实现**\n- 检测循环依赖\n- 生成执行顺序\n- 动态重排优化\n\n**阶段统计**\n- 变更频率跟踪\n- 缓存命中分析\n- 优化建议生成","x":2371,"y":-589,"width":349,"height":432,"color":"2"},
		{"id":"env-manager","type":"text","text":"# 🌍 环境管理器\n\n**env_manager.py**\n- EnvironmentManager\n- 系统变量提取\n- 代理变量处理\n- 排除规则\n- Dockerfile ENV 生成","x":740,"y":1300,"width":250,"height":380,"color":"6"},
		{"id":"cache-json","type":"text","text":"# 📦 .build_cache.json\n\n## 缓存数据结构\n\n```json\n{\n  \"builds\": [\n    {\n      \"timestamp\": \"...\",\n      \"image_tag\": \"...\",\n      \"steps\": [...]\n    }\n  ],\n  \"step_cache\": {\n    \"hash\": {\n      \"type\": \"heavy|light\",\n      \"package\": \"apt|yum|script|config\",\n      \"command\": \"...\",\n      \"last_used\": \"...\",\n      \"cache_level\": \"local|minio|ghcr\"\n    }\n  },\n  \"package_history\": {\n    \"apt\": {\n      \"package_name\": {\n        \"change_count\": 0,\n        \"last_changed\": \"...\"\n      }\n    },\n    \"script\": {\n      \"script_name\": {\n        \"change_count\": 0,\n        \"last_changed\": \"...\"\n      }\n    }\n  },\n  \"setup_hashes\": {\n    \"image:heavy\": \"hash\",\n    \"image:light\": \"hash\"\n  }\n}\n```\n\n**功能**\n- 构建历史记录\n- 步骤哈希缓存 (区分 Heavy/Light)\n- 包级别变更统计\n- 缓存命中追踪","x":-1600,"y":-315,"width":545,"height":1296,"color":"1"},
		{"id":"tracker-module","type":"text","text":"# 📊 Tracker 模块\n\n**build_tracker.py**\n- BuildTracker\n- 变更检测\n- 缓存统计\n- 重建计划生成\n- 阶段频率分析","x":-1020,"y":1360,"width":250,"height":380,"color":"6"},
		{"id":"generator-module","type":"text","text":"# 🏭 Generator 模块\n\n**dockerfile_generator.py**\n- DockerfileGenerator\n- BuildStep 抽象\n- 动态内容生成\n- 环境变量注入点\n- 调试输出生成","x":-615,"y":1020,"width":250,"height":380,"color":"6"},
		{"id":"reuse-strategy","type":"text","text":"# 🎯 层复用策略 (已升级)\n\n## 最大交集复用算法 v2.0\n\n**核心思想**\n找到与当前依赖具有最大共同交集的已构建镜像\n支持 APT 包和 Script 层的智能复用\n\n**层类型标识**\n```\napt:package_name     # APT包层\nscript:script_name   # Script层(基于名称)\nconfig:*            # 配置层(始终重建)\n```\n\n**复用示例**\n```yaml\n# 目标: [apt:curl, apt:git, script:setup_user]\n\n# 已有镜像 A:\n# [apt:curl, apt:git, apt:vim, script:setup_user]\n\n# 复用分析:\n交集 = {apt:curl, apt:git, script:setup_user} # 3项\n缺失 = {} # 无需构建\n额外 = {apt:vim} # 1个多余APT包\n\n# 策略: 使用镜像A (保留额外APT包)\n# 评分: 3×100 - 0×50 - 1×0.01 = 299.99\n```\n\n**多余依赖策略**\n- APT包: 保留(移除可能影响稳定性)\n- Script: 保留(无法安全回滚)\n- 发出警告信息供用户决策\n\n**算法优势**\n- 最小化构建时间\n- 最大化缓存利用\n- Script层名称复用\n- 智能处理多余依赖","x":-990,"y":65,"width":500,"height":795,"color":"1"},
		{"id":"config-separation","type":"text","text":"# 🔄 配置架构重构\n\n## Light vs Heavy 分离\n\n**按变更频率分离**\n- Heavy Setup: 耗时操作先执行\n- Light Setup: 快速配置后执行\n- 优化缓存命中率","x":-180,"y":-1060,"width":530,"height":290,"color":"2"},
		{"id":"light-setup","type":"text","text":"# ⚡ Light Setup\n\n**轻量级配置操作**\n- SSH 配置\n- 用户环境变量\n- 系统配置文件\n\n**特点**\n- 执行快速\n- 变更较少\n- 依赖 Heavy 完成","x":60,"y":-680,"width":280,"height":365,"color":"3"},
		{"id":"build-order","type":"text","text":"# 📋 构建顺序策略\n\n```\n1. Heavy Setup (优先)\n   ├── APT 包安装\n   └── Script 安装\n2. Light Setup (在后)\n   └── 配置修改\n```\n\n**缓存失效规则**\n- Heavy 变更 → Light 全部失效\n- Heavy 内部 → 增量重建","x":-151,"y":-215,"width":422,"height":394,"color":"5"},
		{"id":"heavy-setup","type":"text","text":"# 🏗️ Heavy Setup\n\n**重量级安装操作**\n- APT 包安装 (独立缓存)\n- YUM 包安装 (独立缓存)\n- Script 安装 (Rust/C++等)\n\n**特点**\n- 执行耗时\n- 变更频繁\n- 需要独立缓存层","x":-280,"y":-680,"width":280,"height":365,"color":"4"},
		{"id":"layered-cache","type":"text","text":"# 🏗️ 分层缓存结构 (v4.0)\n\n## layers_cache.json 升级\n\n```json\n{\n  \"layers\": {\n    \"apt-curl-84d3a2e3\": {\n      \"name\": \"curl\",\n      \"type\": \"apt\",\n      \"content\": \"curl\",\n      \"image\": \"ubuntu22-dev:layer-apt-curl-84d3a2e3\"\n    },\n    \"script-create_user-9ca2dfe6\": {\n      \"name\": \"create_user\",\n      \"type\": \"script\",\n      \"content\": \"useradd -m...\",\n      \"image\": \"ubuntu22-dev:layer-script-create_user-9ca2dfe6\"\n    }\n  },\n  \"image_sets\": {\n    \"ubuntu22-dev:latest\": {\n      \"packages\": [\n        \"script:apt_update\",\n        \"apt:openssh-server\",\n        \"apt:sudo\",\n        \"script:create_user\",\n        \"script:install_rust\"\n      ],\n      \"package_count\": 21,\n      \"script_count\": 4,\n      \"total_count\": 27\n    }\n  }\n}\n```\n\n**新特性**\n- 统一的层标识符格式\n- Script层按名称缓存\n- 分别统计包/脚本数量\n- 支持集合运算优化","x":-320,"y":240,"width":430,"height":680,"color":"1"},
		{"id":"parser-module","type":"text","text":"# 📝 Parser 模块\n\n**parser.py**\n- DeclarationParser\n- 解析 YAML/JSON\n- 新旧格式兼容\n- 依赖验证\n- 阶段排序算法","x":403,"y":1020,"width":250,"height":380,"color":"6"},
		{"id":"reuse-module","type":"text","text":"# ♻️ Reuse 模块 (已升级)\n\n**reuse.py**\n- LayerReuseManager\n- 最大交集算法 v2.0\n- APT包+Script层复用\n- 镜像存在性检查\n- 最优基础选择\n- 多余依赖处理策略\n- 构建集合计算\n- 智能缓存评分\n\n**新特性**\n- Script层名称匹配\n- 额外依赖警告\n- 详细调试输出\n- 分别统计包/脚本数量","x":-315,"y":1020,"width":250,"height":530,"color":"6"},
		{"id":"orchestrator-module","type":"text","text":"# 🎭 Orchestrator 模块\n\n**build_orchestrator.py**\n- BuildOrchestrator\n- 流程协调\n- Docker 执行\n- 实时输出\n- 进度显示","x":-65,"y":1720,"width":250,"height":380,"color":"6"}
	],
	"edges":[
		{"id":"edge1","fromNode":"core-concept","fromSide":"right","toNode":"config-separation","toSide":"left"},
		{"id":"edge2","fromNode":"config-separation","fromSide":"bottom","toNode":"heavy-setup","toSide":"top"},
		{"id":"edge3","fromNode":"config-separation","fromSide":"bottom","toNode":"light-setup","toSide":"top"},
		{"id":"edge4","fromNode":"heavy-setup","fromSide":"bottom","toNode":"build-order","toSide":"top"},
		{"id":"edge5","fromNode":"light-setup","fromSide":"bottom","toNode":"build-order","toSide":"top"},
		{"id":"edge6","fromNode":"build-order","fromSide":"right","toNode":"c46323a0ab440a83","toSide":"left","label":"details"},
		{"id":"edge8","fromNode":"cli-interface","fromSide":"bottom","toNode":"config-format","toSide":"top"},
		{"id":"edge9","fromNode":"orchestrator-module","fromSide":"top","toNode":"cli-interface","toSide":"bottom","color":"1","label":"invokes"},
		{"id":"edge10","fromNode":"parser-module","fromSide":"left","toNode":"generator-module","toSide":"right","label":"data flow"},
		{"id":"edge11","fromNode":"generator-module","fromSide":"left","toNode":"tracker-module","toSide":"right","label":"data flow"},
		{"id":"edge12","fromNode":"tracker-module","fromSide":"right","toNode":"orchestrator-module","toSide":"left","label":"data flow"},
		{"id":"edge13","fromNode":"orchestrator-module","fromSide":"right","toNode":"env-manager","toSide":"left","label":"uses"},
		{"id":"edge15","fromNode":"cache-json","fromSide":"bottom","toNode":"tracker-module","toSide":"top","label":"reads/writes"},
		{"id":"edge7","fromNode":"config-separation","fromSide":"right","toNode":"cli-interface","toSide":"left"},
		{"id":"edge16","fromNode":"config-format","fromSide":"bottom","toNode":"parser-module","toSide":"top","label":"parses"},
		{"id":"edge17","fromNode":"core-concept","fromSide":"bottom","toNode":"reuse-strategy","toSide":"top","label":"evolves to"},
		{"id":"edge20","fromNode":"reuse-module","fromSide":"bottom","toNode":"orchestrator-module","toSide":"top","label":"used by"},
		{"id":"edge18","fromNode":"reuse-strategy","fromSide":"right","toNode":"layered-cache","toSide":"left","label":"implements"},
		{"id":"edge19","fromNode":"layered-cache","fromSide":"bottom","toNode":"reuse-module","toSide":"top","label":"managed by"},
		{"id":"edge22","fromNode":"layered-cache","fromSide":"right","toNode":"config-format","toSide":"bottom","label":"cached layers"}
	]
}
